/**
 * Editor Styles
 */
@import "./variables";

// Hide Grid block if inserted for templates modal only.
[data-ghostkit-grid-templates-modal-only] {
    display: none;
}

// Styles from core Columns block
// https://github.com/WordPress/gutenberg/blob/master/blocks/library/columns/editor.scss
.ghostkit-grid {
    position: relative;
    display: block;
    padding-bottom: .01px;
    // These margins make sure that nested blocks stack/overlay with the parent block chrome
    // This is sort of an experiment at making sure the editor looks as much like the end result as possible
    // Potentially the rules here can apply to all nested blocks and enable stacking, in which case it should be moved elsewhere
    margin-right: 0;
    margin-left: 0;

    > .block-editor-inner-blocks {
        > .block-editor-block-list__layout {
            position: relative;
            display: -webkit-box;
            display: -ms-flexbox;
            display: flex;
            -ms-flex-wrap: wrap;
                flex-wrap: wrap;
            -webkit-box-pack: var(--gkt-grid__justify-content);
                -ms-flex-pack: var(--gkt-grid__justify-content);
                    justify-content: var(--gkt-grid__justify-content);
            margin-bottom: calc(-1 * var(--gkt-grid__gap));
            margin-left: calc(-1 * var(--gkt-grid__gap));

            > div.wp-block {
                margin-bottom: var(--gkt-grid__gap);
                margin-left: var(--gkt-grid__gap);
            }
        }
    }
}

.ghostkit-col {
    position: relative;
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
    -webkit-box-flex: 1;
        -ms-flex: 1;
            flex: 1;
    // Fix for previous columns implementation without .ghostkit-col-content
    -ms-flex-wrap: wrap;
        flex-wrap: wrap;
    -webkit-box-ordinal-group: var(--gkt-grid--column__order);
        -ms-flex-order: var(--gkt-grid--column__order);
            order: var(--gkt-grid--column__order);
    width: 100%;
    max-width: 100%;
    min-height: 1px; // Prevent columns from collapsing when empty

    &.wp-block {
        margin: 0;
    }

    > .ghostkit-col-content {
        -ms-flex-item-align: var(--gkt-grid--column__align-self);
            align-self: var(--gkt-grid--column__align-self);
        width: 100%;
        margin-top: -14px;
        margin-bottom: -14px;
    }
}

@each $breakpoint in map-keys($grid-breakpoints) {
    @include media-breakpoint-down($breakpoint) {
        $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

        // Provide basic `.col-{bp}` classes for equal-width flexbox columns
        .ghostkit-col#{$infix} {
            -webkit-box-flex: 1;
                -ms-flex: 1;
                    flex: 1;
            width: 100%;
            max-width: 100%;
        }

        // col size.
        @for $i from 1 through $grid-columns {
            .ghostkit-col#{$infix}-#{$i} {
                // We can't use complex CSS variables here
                // https://github.com/nk-crew/ghostkit/issues/103
                -ms-flex-preferred-size: calc(#{percentage($i / $grid-columns)} - var(--gkt-grid__gap));
                    flex-basis: calc(#{percentage($i / $grid-columns)} - var(--gkt-grid__gap));
                -ms-flex-negative: 0;
                    flex-shrink: 0;
                -webkit-box-flex: 0;
                    -ms-flex-positive: 0;
                        flex-grow: 0;
                width: calc(#{percentage($i / $grid-columns)} - var(--gkt-grid__gap));
                max-width: calc(#{percentage($i / $grid-columns)} - var(--gkt-grid__gap));
            }
        }

        // col order.
        .ghostkit-col-order#{$infix}-first {
            --gkt-grid--column__order: -1;
        }
        .ghostkit-col-order#{$infix}-last {
            --gkt-grid--column__order: #{$grid-columns + 1};
        }

        @for $i from 0 through $grid-columns {
            .ghostkit-col-order#{$infix}-#{$i} {
                --gkt-grid--column__order: #{$i};
            }
        }
    }
}

// Vertical align.
.ghostkit-grid-align-items-start {
    --gkt-grid--column__align-self: flex-start;
}
.ghostkit-grid-align-items-center {
    --gkt-grid--column__align-self: center;
}
.ghostkit-grid-align-items-end {
    --gkt-grid--column__align-self: flex-end;
}

// Vertical align column.
@each $breakpoint in map-keys($grid-breakpoints) {
    @include media-breakpoint-down($breakpoint) {
        $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

        .ghostkit-col-align-self#{$infix}-start {
            --gkt-grid--column__align-self: flex-start;
        }
        .ghostkit-col-align-self#{$infix}-center {
            --gkt-grid--column__align-self: center;
        }
        .ghostkit-col-align-self#{$infix}-end {
            --gkt-grid--column__align-self: flex-end;
        }
    }
}

// Horizontal align.
.ghostkit-grid-justify-content-center {
    --gkt-grid__justify-content: center;
}
.ghostkit-grid-justify-content-end {
    --gkt-grid__justify-content: flex-end;
}
.ghostkit-grid-justify-content-around {
    --gkt-grid__justify-content: space-around;
}
.ghostkit-grid-justify-content-between {
    --gkt-grid__justify-content: space-between;
}

// Gaps.
@each $name, $size in $grid-gaps {
    .ghostkit-grid-gap-#{$name} {
        --gkt-grid__gap: #{$size};
    }
}

// Columns Sticky.
.ghostkit-col-sticky-top > .ghostkit-col-content {
    position: -webkit-sticky;
    position: sticky;
    top: var(--gkt-grid--column-sticky__offset);
}
.ghostkit-col-sticky-bottom {
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
    -webkit-box-orient: vertical;
    -webkit-box-direction: normal;
        -ms-flex-direction: column;
            flex-direction: column;

    > .ghostkit-col-content {
        position: -webkit-sticky;
        position: sticky;
        bottom: var(--gkt-grid--column-sticky__offset);
        margin-top: auto;
    }
}

// Background AWB
.ghostkit-grid > .awb-gutenberg-preview-block,
.ghostkit-col > .awb-gutenberg-preview-block {
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    pointer-events: none;
    -webkit-transition: .15s border ease-in-out;
    -o-transition: .15s border ease-in-out;
    transition: .15s border ease-in-out;

    // fix for AWB border style.
    &:empty {
        border: none;
    }

    > .nk-awb-overlay {
        position: absolute;
        top: 0;
        left: 0;
    }

    // fixed for some default themes styles
    > .nk-awb-inner > img,
    > .nk-awb-inner > div,
    > div {
        width: 100%;
        height: 100%;
        -o-object-fit: cover;
           object-fit: cover;
    }
}

// Example.
.block-editor-inserter__preview .ghostkit-col-content .block-editor-block-list__layout {
    margin-right: 0;
    margin-left: 0;
}

// Highlight the label to easily select grid/column block by clicking on it.
.ghostkit-grid-button-select,
.ghostkit-column-button-select {
    position: absolute;
    top: 6px;
    right: 6px;
    width: 25px;
    height: 25px;
    padding: 2px 4px;
    font-family: $default-font;
    font-size: 17px;
    line-height: 25px;
    color: #fff;
    cursor: pointer;
    visibility: hidden;
    background-color: $gray-900;
    border-radius: 14px;
    opacity: 0;
    -webkit-transition: .2s opacity, .2s visibility, .2s background-color;
    -o-transition: .2s opacity, .2s visibility, .2s background-color;
    transition: .2s opacity, .2s visibility, .2s background-color;
    z-index: 21;

    svg {
        width: auto;
        height: 1em;
    }
}
.ghostkit-grid-button-select {
    top: auto;
    bottom: 100%;
    margin-bottom: 10px;
}
[data-type="ghostkit/grid"]:hover > .ghostkit-grid > .ghostkit-grid-button-select,
[data-type="ghostkit/grid-column"]:hover > .ghostkit-col-content > .ghostkit-column-button-select {
    visibility: visible;
    opacity: 1;
}
.ghostkit-grid-button-select:hover,
.ghostkit-column-button-select:hover {
    background-color: $blue-wordpress-700;
}

// add outlines on hover
[data-type="ghostkit/grid"]:not(.is-selected):hover::before,
[data-type="ghostkit/grid-column"]:not(.is-selected):hover::before {
    border-color: $dark-gray-100;
    border-left: 1px solid $dark-gray-100;
}

// Layouts selector.
.ghostkit-select-layout {
    padding: 25px;

    .components-placeholder__fieldset > em {
        margin-bottom: 25px;
    }

    .ghostkit-grid-layout-preview {
        display: -webkit-box;
        display: -ms-flexbox;
        display: flex;
        -ms-flex-wrap: wrap;
            flex-wrap: wrap;
        // justify-content: center;
        margin-right: -7px;
        margin-left: -7px;

        .ghostkit-grid-layout-preview-btn {
            --gkt-grid__gap: 0%;

            display: -webkit-box;

            display: -ms-flexbox;

            display: flex;
            width: 85px;
            padding: 0;
            margin-right: 7px;
            margin-bottom: 14px;
            margin-left: 7px;
            overflow: hidden;
            cursor: pointer;
            background: none;
            border: 2px solid rgba($dark-gray-500, .75);
            border-radius: 4px;
            -webkit-transition: .15s border-color, .15s background-color;
            -o-transition: .15s border-color, .15s background-color;
            transition: .15s border-color, .15s background-color;

            .ghostkit-col {
                height: 40px;
                border-right: 2px solid rgba($dark-gray-500, .75);
                -webkit-transition: .15s border-color;
                -o-transition: .15s border-color;
                transition: .15s border-color;

                &:last-of-type {
                    border-right: none;
                }
            }

            &:hover,
            &:focus {
                background-color: #fff;
                border-color: $dark-gray-500;

                .ghostkit-col {
                    border-color: $dark-gray-500;
                }
            }
        }
    }

    // templates button.
    .components-button.is-primary {
        height: 35px;
        padding: 0 15px;
        margin-top: 10px;
        font-size: 14px;
    }
}
